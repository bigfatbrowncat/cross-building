<h2>Building of crossplatform applications on Windows</h2>
<p>Here we describe how to prepare all the tools that are necessary to make
crossplatform applications on Windows 7 or newer and architectures x86 or x86_64.</p>
<h3>1. Downloading MinGW and MSYS</h3>
<p>Операционная система Windows несовместима со стандартом POSIX, поэтому напрямую работать в ней с <code>make</code> и <code>gcc</code> затруднительно. К счастью, эта проблема решена с помощью двух замечательных продуктов &#151; MinGW и MSYS.
<ul>
	<li>MinGW (а точнее &#151; mingw-w64) &#151; набор компиляторов GNU и связанных утилит, то есть gcc, gdb, ld и т. д... Всё, к чему привыкли разработчики под Unix-системами</li>
	<li>MSYS &#151; системные утилиты Unix, портированные на Win32. В первую очередь это shell. Кроме того, присутствуют make, find и прочие простейшие утилиты командной строки, что делает возможным использование универсальных (или почти универсальных) Makefile-ов между Windows и Unix-системами.</li>
</ul>
Помимо перечисленного, необходима также сборка git, работающая под Windows</p>
<p>Разработка и поддержка перечисленных утилит производится большим сообществом разработчиков, что, к сожалению, приводит к появлению множества чуть-чуть различающихся сборок. Автором была экспериментально найден комплект сборок, который хорошо работает. Он состоит из довольно свежего gcc (4.9.1) и все утилиты зарекомендовали себя как надежные. Забрать его можно, скачав 2 файла:</p>
<ul>
	<li><a href="https://github.com/bigfatbrowncat/cross-building/blob/master/windows/files/msys%2B7za%2Bwget%2Bsvn%2Bgit%2Bmercurial%2Bcvs-rev13.7z?raw=true">msys+7za+wget+svn+git+mercurial+cvs-rev13.7z</a> &#151; это MSYS</li>
	<li><a href="https://github.com/bigfatbrowncat/cross-building/blob/master/windows/files/x86_64-4.9.1-release-posix-seh-rt_v3-rev0.7z?raw=true">x86_64-4.9.1-release-posix-seh-rt_v3-rev0.7z</a> &#151; это MinGW с 64-битными компиляторами</li>
</ul>
<p>Для распаковки архивов, нам потребуется разархиватор <a href="http://www.7-zip.org/">7zip</a> (возможно, у вас есть WinRAR &#151; он тоже справится с этой задачей).</p>

<h3>2. Распаковка</h3>
<p>Создайте директорию <code>C:\mingw</code>. На самом деле, не обязательно, чтобы она была именно на диске C: Главное &#151; чтобы в пути не было пробелов. То есть <code>C:\Program Files\mingw</code> <emph>не подойдет!</emph></p>
<p>В архиве с MSYS присутствует папка <code>msys</code>. Она должна стать <code>C:\mingw\msys</code>. В архиве с MinGW есть папка <code>mingw64</code>. Она должна стать <code>C:\mingw\mingw64</code>.

<h3>3. Настройка</h3>
<p>Для того, чтобы связать MinGW и MSYS между собой, необходимо указать путь к MinGW в настройках MSYS. Конкретнее, зайдите в ваш любимый текстовый редактор (я использую <a href="http://http://notepad-plus-plus.org/">Notepad++</a>) и создайте там файл следующего содержания:
<pre><code>C:\mingw\mingw64		/mingw</code></pre>
Сохраните этот файл под именем <code>C:\mingw\msys\etc\fstab</code>.</p>
<p>Так как среда MSYS сама по себе является 32-битной, многие сборочные скрипты будут ошибочно считать, что собирать требуется 32-битные исполняемые файлы (что не умеют делать 64-битные компиляторы MinGW). Поэтому желательно прописать в <code>C:\mingw\msys\etc\profile</code> строку
<pre><code>export ARCH=x86_64</code></pre>
Просто откройте файл profile, допишите эту строку в конец и сохраните.</p>

<h3>4. Проверка и использование</h3>
<p>Для того, чтобы использовать все развёрнутые утилиты, необходимо запустить консоль MSYS с помощью bat-файла <code>C:\mingw\msys\msys.bat</code>. Откроем ее и убедимся в том, что всё работает. Введем в запущенной консоли команду <code>gcc</code>.</p>
<pre><code>user@machine ~
$ gcc
gcc.exe: fatal error: no input files
compilation terminated.

user@machine ~
$ _
</code></pre>
<p>Увидев такую ошибку, возрадуемся. gcc найден и сообщает нам, что ему не передали входной файл. Но сам факт того, что он найден означает, что файл fstab успешно подцеплен и связь между MinGW и MSYS установлена.</p>

<h3>5. Пара замечаний</h3>
<ol>
	<li>Домашняя папка MSYS не соответствует домашней папке пользователя Windows. В каком-то смысле это даже хорошо &#151; ваши MinGW-проекты будут лежать отдельно и вы будете знать, что доступ к ним желательно осуществлять через консоль MSYS.</li>
	<li>При использовании каких-либо GUI-приложений (например, IDE) при разработке, запускайте их из командной строки MSYS, чтобы они получили правильную командную среду. За пределами консоли MSYS никто не знает, где находятся утилиты из MinGW.</li>
</ol>